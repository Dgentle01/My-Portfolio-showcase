// This file is generated by Firebase Genkit.
'use server';
/**
 * @fileOverview An AI agent that suggests relevant portfolio projects based on user-provided keywords.
 *
 * - suggestProjects - A function that suggests relevant projects.
 * - SuggestProjectsInput - The input type for the suggestProjects function.
 * - SuggestProjectsOutput - The return type for the suggestProjects function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestProjectsInputSchema = z.object({
  keywords: z
    .string()
    .describe("Keywords describing the user's skills and interests."),
  projectNames: z.array(z.string()).describe('The names of available projects.'),
  projectDescriptions: z
    .array(z.string())
    .describe('The descriptions of available projects.'),
});
export type SuggestProjectsInput = z.infer<typeof SuggestProjectsInputSchema>;

const SuggestProjectsOutputSchema = z.object({
  suggestedProjects: z
    .array(z.string())
    .describe('The names of the projects suggested by the AI.'),
});
export type SuggestProjectsOutput = z.infer<typeof SuggestProjectsOutputSchema>;

export async function suggestProjects(input: SuggestProjectsInput): Promise<SuggestProjectsOutput> {
  return suggestProjectsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestProjectsPrompt',
  input: {schema: SuggestProjectsInputSchema},
  output: {schema: SuggestProjectsOutputSchema},
  prompt: `You are a portfolio advisor. A user will provide keywords describing their skills and interests.  You will suggest relevant projects from their available projects to display in their portfolio, helping them quickly tailor their portfolio to specific opportunities.

User Keywords: {{{keywords}}}

Available Projects:
{{#each projectNames}}
- {{this}}
{{/each}}

Available Project Descriptions:
{{#each projectDescriptions}}
- {{this}}
{{/each}}

Based on the user keywords, suggest the most relevant projects from the available projects.
Return ONLY the names of the suggested projects.  Do not return any other text.`,
});

const suggestProjectsFlow = ai.defineFlow(
  {
    name: 'suggestProjectsFlow',
    inputSchema: SuggestProjectsInputSchema,
    outputSchema: SuggestProjectsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
